// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package serverpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GroupGetRequest
	GroupListRequest
	GroupGetResponse
	GroupListResponse
	ProfilePutRequest
	ProfilePutResponse
	ProfileGetRequest
	ProfileGetResponse
	ProfileListRequest
	ProfileListResponse
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import storagepb "github.com/coreos/coreos-baremetal/bootcfg/storage/storagepb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type GroupGetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GroupGetRequest) Reset()                    { *m = GroupGetRequest{} }
func (m *GroupGetRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupGetRequest) ProtoMessage()               {}
func (*GroupGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GroupListRequest struct {
}

func (m *GroupListRequest) Reset()                    { *m = GroupListRequest{} }
func (m *GroupListRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupListRequest) ProtoMessage()               {}
func (*GroupListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GroupGetResponse struct {
	Group *storagepb.Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *GroupGetResponse) Reset()                    { *m = GroupGetResponse{} }
func (m *GroupGetResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupGetResponse) ProtoMessage()               {}
func (*GroupGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GroupGetResponse) GetGroup() *storagepb.Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GroupListResponse struct {
	Groups []*storagepb.Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *GroupListResponse) Reset()                    { *m = GroupListResponse{} }
func (m *GroupListResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupListResponse) ProtoMessage()               {}
func (*GroupListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GroupListResponse) GetGroups() []*storagepb.Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ProfilePutRequest struct {
	Profile *storagepb.Profile `protobuf:"bytes,1,opt,name=profile" json:"profile,omitempty"`
}

func (m *ProfilePutRequest) Reset()                    { *m = ProfilePutRequest{} }
func (m *ProfilePutRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfilePutRequest) ProtoMessage()               {}
func (*ProfilePutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProfilePutRequest) GetProfile() *storagepb.Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ProfilePutResponse struct {
}

func (m *ProfilePutResponse) Reset()                    { *m = ProfilePutResponse{} }
func (m *ProfilePutResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfilePutResponse) ProtoMessage()               {}
func (*ProfilePutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ProfileGetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ProfileGetRequest) Reset()                    { *m = ProfileGetRequest{} }
func (m *ProfileGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileGetRequest) ProtoMessage()               {}
func (*ProfileGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ProfileGetResponse struct {
	Profile *storagepb.Profile `protobuf:"bytes,1,opt,name=profile" json:"profile,omitempty"`
}

func (m *ProfileGetResponse) Reset()                    { *m = ProfileGetResponse{} }
func (m *ProfileGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfileGetResponse) ProtoMessage()               {}
func (*ProfileGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProfileGetResponse) GetProfile() *storagepb.Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ProfileListRequest struct {
}

func (m *ProfileListRequest) Reset()                    { *m = ProfileListRequest{} }
func (m *ProfileListRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileListRequest) ProtoMessage()               {}
func (*ProfileListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ProfileListResponse struct {
	Profiles []*storagepb.Profile `protobuf:"bytes,1,rep,name=profiles" json:"profiles,omitempty"`
}

func (m *ProfileListResponse) Reset()                    { *m = ProfileListResponse{} }
func (m *ProfileListResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfileListResponse) ProtoMessage()               {}
func (*ProfileListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ProfileListResponse) GetProfiles() []*storagepb.Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func init() {
	proto.RegisterType((*GroupGetRequest)(nil), "serverpb.GroupGetRequest")
	proto.RegisterType((*GroupListRequest)(nil), "serverpb.GroupListRequest")
	proto.RegisterType((*GroupGetResponse)(nil), "serverpb.GroupGetResponse")
	proto.RegisterType((*GroupListResponse)(nil), "serverpb.GroupListResponse")
	proto.RegisterType((*ProfilePutRequest)(nil), "serverpb.ProfilePutRequest")
	proto.RegisterType((*ProfilePutResponse)(nil), "serverpb.ProfilePutResponse")
	proto.RegisterType((*ProfileGetRequest)(nil), "serverpb.ProfileGetRequest")
	proto.RegisterType((*ProfileGetResponse)(nil), "serverpb.ProfileGetResponse")
	proto.RegisterType((*ProfileListRequest)(nil), "serverpb.ProfileListRequest")
	proto.RegisterType((*ProfileListResponse)(nil), "serverpb.ProfileListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Groups service

type GroupsClient interface {
	// Get a machine Group by id.
	GroupGet(ctx context.Context, in *GroupGetRequest, opts ...grpc.CallOption) (*GroupGetResponse, error)
	// List all machine Groups.
	GroupList(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupListResponse, error)
}

type groupsClient struct {
	cc *grpc.ClientConn
}

func NewGroupsClient(cc *grpc.ClientConn) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) GroupGet(ctx context.Context, in *GroupGetRequest, opts ...grpc.CallOption) (*GroupGetResponse, error) {
	out := new(GroupGetResponse)
	err := grpc.Invoke(ctx, "/serverpb.Groups/GroupGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GroupList(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupListResponse, error) {
	out := new(GroupListResponse)
	err := grpc.Invoke(ctx, "/serverpb.Groups/GroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Groups service

type GroupsServer interface {
	// Get a machine Group by id.
	GroupGet(context.Context, *GroupGetRequest) (*GroupGetResponse, error)
	// List all machine Groups.
	GroupList(context.Context, *GroupListRequest) (*GroupListResponse, error)
}

func RegisterGroupsServer(s *grpc.Server, srv GroupsServer) {
	s.RegisterService(&_Groups_serviceDesc, srv)
}

func _Groups_GroupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GroupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupsServer).GroupGet(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Groups_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupsServer).GroupList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Groups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GroupGet",
			Handler:    _Groups_GroupGet_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _Groups_GroupList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Profiles service

type ProfilesClient interface {
	// Create a Profile.
	ProfilePut(ctx context.Context, in *ProfilePutRequest, opts ...grpc.CallOption) (*ProfilePutResponse, error)
	// Get a Profile by id.
	ProfileGet(ctx context.Context, in *ProfileGetRequest, opts ...grpc.CallOption) (*ProfileGetResponse, error)
	// List all Profiles.
	ProfileList(ctx context.Context, in *ProfileListRequest, opts ...grpc.CallOption) (*ProfileListResponse, error)
}

type profilesClient struct {
	cc *grpc.ClientConn
}

func NewProfilesClient(cc *grpc.ClientConn) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) ProfilePut(ctx context.Context, in *ProfilePutRequest, opts ...grpc.CallOption) (*ProfilePutResponse, error) {
	out := new(ProfilePutResponse)
	err := grpc.Invoke(ctx, "/serverpb.Profiles/ProfilePut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) ProfileGet(ctx context.Context, in *ProfileGetRequest, opts ...grpc.CallOption) (*ProfileGetResponse, error) {
	out := new(ProfileGetResponse)
	err := grpc.Invoke(ctx, "/serverpb.Profiles/ProfileGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) ProfileList(ctx context.Context, in *ProfileListRequest, opts ...grpc.CallOption) (*ProfileListResponse, error) {
	out := new(ProfileListResponse)
	err := grpc.Invoke(ctx, "/serverpb.Profiles/ProfileList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profiles service

type ProfilesServer interface {
	// Create a Profile.
	ProfilePut(context.Context, *ProfilePutRequest) (*ProfilePutResponse, error)
	// Get a Profile by id.
	ProfileGet(context.Context, *ProfileGetRequest) (*ProfileGetResponse, error)
	// List all Profiles.
	ProfileList(context.Context, *ProfileListRequest) (*ProfileListResponse, error)
}

func RegisterProfilesServer(s *grpc.Server, srv ProfilesServer) {
	s.RegisterService(&_Profiles_serviceDesc, srv)
}

func _Profiles_ProfilePut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProfilePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProfilesServer).ProfilePut(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Profiles_ProfileGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProfileGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProfilesServer).ProfileGet(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Profiles_ProfileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProfileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProfilesServer).ProfileList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Profiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProfilePut",
			Handler:    _Profiles_ProfilePut_Handler,
		},
		{
			MethodName: "ProfileGet",
			Handler:    _Profiles_ProfileGet_Handler,
		},
		{
			MethodName: "ProfileList",
			Handler:    _Profiles_ProfileList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x4e, 0xeb, 0x30,
	0x10, 0x7e, 0x79, 0x88, 0x92, 0x4e, 0x25, 0x68, 0x0d, 0x0b, 0x08, 0x45, 0x02, 0x23, 0xa1, 0x2e,
	0xc0, 0x95, 0xca, 0x0e, 0x89, 0x05, 0x20, 0xa8, 0x40, 0x5d, 0x54, 0xb9, 0x41, 0x13, 0xdc, 0x10,
	0xa9, 0xc5, 0xc6, 0x76, 0xb8, 0x09, 0xd7, 0xe4, 0x0c, 0xb4, 0x8e, 0xed, 0x9a, 0x26, 0xb0, 0x60,
	0x65, 0x6b, 0xbe, 0x1f, 0xcf, 0xcc, 0x97, 0x40, 0x53, 0xf0, 0x94, 0x70, 0xc1, 0x14, 0x43, 0xa1,
	0xa4, 0xe2, 0x9d, 0x0a, 0x9e, 0x44, 0x4f, 0x59, 0xae, 0x5e, 0x8a, 0x84, 0xa4, 0x6c, 0xde, 0x4f,
	0x99, 0xa0, 0x4c, 0x9a, 0xe3, 0x22, 0x99, 0x08, 0x3a, 0xa7, 0x6a, 0x32, 0xeb, 0x27, 0x8c, 0xa9,
	0x74, 0x9a, 0xf5, 0xa5, 0x62, 0x62, 0x92, 0x51, 0x7b, 0xf2, 0xc4, 0xde, 0x4a, 0x57, 0x7c, 0x02,
	0x3b, 0x43, 0xc1, 0x0a, 0x3e, 0xa4, 0x2a, 0xa6, 0x6f, 0x05, 0x95, 0x0a, 0x6d, 0xc3, 0xff, 0xfc,
	0x79, 0x3f, 0x38, 0x0e, 0x7a, 0xcd, 0x78, 0x71, 0xc3, 0x08, 0xda, 0x9a, 0x32, 0xca, 0xa5, 0xe5,
	0xe0, 0x2b, 0x53, 0xd3, 0x32, 0xc9, 0xd9, 0xab, 0xa4, 0xe8, 0x0c, 0x36, 0xb3, 0x65, 0x4d, 0x4b,
	0x5b, 0x83, 0x36, 0x71, 0x6f, 0x12, 0xcd, 0x8d, 0x4b, 0x18, 0x5f, 0x43, 0xc7, 0xf3, 0x33, 0xe2,
	0x1e, 0x34, 0x34, 0x2a, 0x17, 0xea, 0x8d, 0x5a, 0xb5, 0xc1, 0xf1, 0x0d, 0x74, 0xc6, 0x82, 0x4d,
	0xf3, 0x19, 0x1d, 0x17, 0xae, 0xe7, 0x73, 0xd8, 0xe2, 0x65, 0xd1, 0xbc, 0x8e, 0x3c, 0xbd, 0xa1,
	0xc7, 0x96, 0x82, 0xf7, 0x00, 0xf9, 0x16, 0x65, 0x0b, 0xf8, 0xd4, 0x19, 0xff, 0xb2, 0x8c, 0x5b,
	0x27, 0xf5, 0x47, 0xff, 0xeb, 0xf3, 0xfe, 0x4a, 0xef, 0x61, 0xf7, 0x5b, 0xd5, 0x58, 0x13, 0x08,
	0x8d, 0xce, 0xae, 0xa6, 0xce, 0xdb, 0x71, 0x06, 0x1f, 0x01, 0x34, 0xf4, 0xc2, 0x24, 0xba, 0x83,
	0xd0, 0x86, 0x84, 0x0e, 0x88, 0xfd, 0x7c, 0xc8, 0x5a, 0xde, 0x51, 0x54, 0x07, 0x99, 0x9d, 0xfc,
	0x43, 0x0f, 0xd0, 0x74, 0x69, 0xa1, 0x75, 0xaa, 0xd7, 0x7f, 0x74, 0x58, 0x8b, 0x59, 0x9f, 0xc1,
	0x67, 0x00, 0xa1, 0xe9, 0x56, 0xa2, 0x47, 0x80, 0x55, 0x00, 0xc8, 0x53, 0x56, 0x92, 0x8d, 0xba,
	0xf5, 0xa0, 0xeb, 0x6f, 0x65, 0xb5, 0x1c, 0xb3, 0x6a, 0xe5, 0x0d, 0xda, 0xad, 0x07, 0x9d, 0xd5,
	0x08, 0x5a, 0x5e, 0x02, 0xa8, 0x4a, 0xf7, 0xc7, 0x3d, 0xfa, 0x01, 0xb5, 0x6e, 0x49, 0x43, 0xff,
	0x60, 0x97, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x2a, 0x65, 0x01, 0xc3, 0x03, 0x00, 0x00,
}
